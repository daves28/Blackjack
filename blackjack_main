"""
Blackjack

1. Create card class, attributes suit and rank
2. Create deck class and random card generation
3. Create hand class
4. Create betting, staying, hitting functionality
5. Establish game loop
    - Deal two cards to player and dealer. Dealer 1 up 1 down, player 2 up.
    - Ask player to hit or stay.
    - Establish rules for busting
    - If player stays, dealer hits until beat or bust.
    - Add or deduct from player balance
    - Ask if you would like to continue
"""
import random

suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,
         'Queen':10, 'King':10, 'Ace':11}
playing = True


class Card:
    def __init__(self,suit,rank):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return self.rank + " of " + self.suit


class Deck:

    def __init__(self):
        self.deck = []  # start with an empty list
        for suit in suits:
            for rank in ranks:
                self.deck.append(Card(suit, rank))

    def __str__(self):
        deck_comp = ''  # start with an empty string
        for card in self.deck:
            deck_comp += '\n ' + card.__str__()  # add each Card object's print string
        return 'The deck has:' + deck_comp

    def shuffle(self):
        random.shuffle(self.deck)

    def deal(self):
        rank_suit = self.deck.pop()
        return rank_suit


class Hand:

    def __init__(self):
        self.cards = []
        self.value = 0
        self.aces = 0

    def add_card(self, card):
        self.cards.append(card)
        self.value += values[card.rank]

        if card.rank == 'Ace':
            self.aces += 1

    def adjust_for_aces(self):
        while self.aces > 0 and self.value > 21:
            self.value -= 10
            self.aces -= 1


class Chips:

    def __init__(self):
        self.total = 100
        self.bet = 0

    def win_bet(self):
        self.total += self.bet
        self.bet = 0

    def lose_bet(self):
        self.total -= self.bet
        self.bet = 0

    def push(self):
        self.bet = 0


def take_bet(chips):
    while True:
        try:
            x = int(input("Enter bet size: "))

        except TypeError:
            print("You did not enter a number, try again")

        except:
            print("Error occurred, please enter another number.")
        else:
            if x > chips.total:
                print("Your bet size exceeds your bankroll. Choose a smaller number.")
                continue
            else:
                chips.bet = x
                break

def hit(deck,hand):

    c = deck.deal()
    hand.add_card(c)
    hand.adjust_for_aces()


def hit_or_stand(deck, hand):
    global playing  # to control an upcoming while loop

    while True:
        x = input("Would you like to Hit or Stand? Enter 'h' or 's' ")

        if x[0].lower() == 'h':
            hit(deck, hand)  # hit() function defined above

        elif x[0].lower() == 's':
            print("Player stands. Dealer is playing.")
            playing = False

        else:
            print("Sorry, please try again.")
            continue
        break


def show_some(player, dealer):
    print("\nDealer's Hand:")
    print(" <card hidden>")
    print('', dealer.cards[1])
    print("\nPlayer's Hand:", *player.cards, sep='\n ')


def show_all(player, dealer):
    print("\nDealer's Hand:", *dealer.cards, sep='\n ')
    print("Dealer's Hand =", dealer.value)
    print("\nPlayer's Hand:", *player.cards, sep='\n ')
    print("Player's Hand =", player.value)


def player_busts(playerChips):
    print(f"\nYou busted. You lost {playerChips.bet} gold doubloons.")
    playerChips.lose_bet()


def player_wins(playerChips):
    print(f"\nYou won. You gained {playerChips.bet} gold doubloons.")
    playerChips.win_bet()


def dealer_busts(playerChips):
    print(f"\nThe dealer busted, you win. You gained {playerChips.bet} gold doubloons.")
    playerChips.win_bet()


def dealer_wins(playerChips):
    print(f"\nThe dealer wins. You lost {playerChips.bet} gold doubloons.")
    playerChips.lose_bet()


def push():
    print("\nIt's a tie. No winner.")


# Game Loop

playing = True

while True:
    print("Let's play blackjack!")

    # Create and shuffle deck, create player chip stack, create player and dealer hands.
    deck = Deck()
    deck.shuffle()
    playerChips = Chips()
    playerHand = Hand()
    dealerHand = Hand()

    take_bet(playerChips)

    # Deal initial cards to player and dealer
    hit(deck, playerHand)
    hit(deck, playerHand)
    hit(deck, dealerHand)
    hit(deck, dealerHand)

    show_some(playerHand, dealerHand)

    while playing:  # recall this variable from our hit_or_stand function

        hit_or_stand(deck, playerHand)  # Prompt for Player to Hit or Stand

        show_some(playerHand, dealerHand)  # Show cards (but keep one dealer card hidden)

        if playerHand.value > 21:
            player_busts(playerChips)
            break  # If player's hand exceeds 21, run player_busts() and break out of loop

    show_all(playerHand, dealerHand)

    while dealerHand.value < 17 and playerChips.bet > 0:  # If Player hasn't busted, play Dealer's hand until Dealer reaches 17
        print('\n')
        hit(deck, dealerHand)
        print('Dealer hits.')
        show_all(playerHand, dealerHand)  # Show all cards

    if dealerHand.value <= 21 and playerChips.bet > 0:  # Run different winning scenarios
        if dealerHand.value > playerHand.value:
            dealer_wins(playerChips)

        elif dealerHand.value == playerHand.value:
            push(playerChips)

        else:
            player_wins(playerChips)

    else:
        dealer_busts(playerChips)

    print(f"You have {playerChips.total} gold doubloons")  # Inform Player of their chips total
    k = input("Would you like to play again? (y or n): ")  # Ask to play again
    if k.lower() == ('y' or 'yes'):
        continue
    elif k.lower() == ('n' or 'no'):
        print("Goodbye!")
        break
    else:
        print("Goodbye!")
        break